#!/usr/bin/python3
from math import ceil
from math import floor
from datetime import datetime

from ptcommon.i2c_device import I2CDevice


def int_to_hex(value, no_of_bytes=8):
    return "0x" + hex(value)[2:].zfill(ceil(no_of_bytes / 2))


def int_to_binary(value, no_of_bytes=1):
    return "{0:b}".format(value).zfill(8 * no_of_bytes)


def int_to_mac_address(value):
    return ":".join(
        ["{}{}".format(a, b)
         for a, b in zip(*[iter("{:012x}".format(value))] * 2)]
    )


def int_to_date(value):
    # Day + Month × 32 + (Year–1980) × 512

    year = floor(value / 512) + 1980
    month = floor((value - (512 * (year - 1980))) / 32)
    day = value - 512 * (year - 1980) - 32 * (month)

    # yyyy-mm-dd
    return str(year).zfill(4) + "-" + str(month).zfill(2) + "-" + str(day).zfill(2)


def int_to_date_unix(value):
    try:
        return datetime.utcfromtimestamp(int(value)).strftime("%Y-%m-%d %H:%M:%S")
    except OverflowError:
        return "Returned value invalid"


try:
    try:
        device = I2CDevice("/dev/i2c-1", 0x11)
        device.connect()
    except Exception:
        try:
            device = I2CDevice("/dev/i2c-1", 0x10)
            device.connect()
        except Exception:
            print("This diagnostics tool only supports pt[3] and pt[4]")
            exit()

    print("----------------------------")
    print(" pi-top Hub Register Values")
    print("----------------------------")

    print("")
    print("[Hardware Control and Status]")

    BRD_DETECT = device.read_unsigned_byte(0x10)
    MODULE_DETECT = device.read_unsigned_byte(0x11)
    BATT_AND_DISP_I2C_MUX = device.read_unsigned_byte(0x13)
    UI_OLED_CTRL = device.read_unsigned_byte(0x14)
    UI_BUTTON_CTRL = device.read_unsigned_byte(0x15)

    print("BRD_DETECT: " + str(int_to_binary(BRD_DETECT)))
    print("MODULE_DETECT: " + str(MODULE_DETECT))
    print("BATT_AND_DISP_I2C_MUX: " + str(BATT_AND_DISP_I2C_MUX))
    print("UI_OLED_CTRL: " + str(int_to_binary(UI_OLED_CTRL)))
    print("UI_BUTTON_CTRL: " + str(int_to_binary(UI_BUTTON_CTRL)))

    print("")
    print("[Diagnostics]")

    UPTIME_STDBY = device.read_n_unsigned_bytes(0x20, number_of_bytes=4)
    UPTIME_RAILSON = device.read_n_unsigned_bytes(0x21, number_of_bytes=4)
    LIFETIME_STDBY = device.read_n_unsigned_bytes(0x22, number_of_bytes=4)
    LIFETIME_RAILSON = device.read_n_unsigned_bytes(0x23, number_of_bytes=4)
    LIFETIME_ONOFFCYC = device.read_unsigned_word(0x24)

    print("UPTIME_STDBY: " + str(UPTIME_STDBY) + " mins")
    print("UPTIME_RAILSON: " + str(UPTIME_RAILSON) + " mins")
    print("LIFETIME_STDBY: " + str(LIFETIME_STDBY) + " hours")
    print("LIFETIME_RAILSON: " + str(LIFETIME_RAILSON) + " hours")
    print("LIFETIME_ONOFFCYC: " + str(LIFETIME_ONOFFCYC) + " cycles")

    print("")
    print("[Keyboard Control and Status]")

    KEYBOARD_MAC_ADDRESS = device.read_n_unsigned_bytes(
        0x50, number_of_bytes=6)
    DOCK_FLAG = device.read_unsigned_byte(0x51)
    FW_VER = device.read_unsigned_byte(0x52)
    HW_VER = device.read_unsigned_byte(0x53)
    BT_MASTER_MAC_ADDRESS = device.read_n_unsigned_bytes(
        0x54, number_of_bytes=6)
    CHRG_THRSH_HUB = device.read_unsigned_byte(0x55)
    CHRG_THRSH_KBRD = device.read_unsigned_byte(0x56)
    CHARGED_FLAG = device.read_unsigned_byte(0x57)
    BATT_LEVEL = device.read_unsigned_byte(0x58)
    PAIRING_STATUS = device.read_unsigned_byte(0x5A)

    print("KEYBOARD_MAC_ADDRESS: " +
          str(int_to_mac_address(KEYBOARD_MAC_ADDRESS)))
    print("DOCK_FLAG: " + str(DOCK_FLAG))
    print("FW_VER: " + str(FW_VER))
    print("HW_VER: " + str(HW_VER))
    print("BT_MASTER_MAC_ADDRESS: " +
          str(int_to_mac_address(BT_MASTER_MAC_ADDRESS)))
    print("CHRG_THRSH_HUB: " + str(CHRG_THRSH_HUB) + " %")
    print("CHRG_THRSH_KBRD: " + str(CHRG_THRSH_KBRD) + " %")
    print("CHARGED_FLAG: " + str(CHARGED_FLAG))
    print("BATT_LEVEL: " + str(BATT_LEVEL) + " %")
    print("PAIRING_STATUS: " + str(PAIRING_STATUS))

    print("")
    print("[Advanced Power and Debug]")

    VOLT_BATT_IN = device.read_unsigned_word(0x70)
    VOLT_DC_IN = device.read_unsigned_word(0x71)
    VOLT_MPWR_IN = device.read_unsigned_word(0x72)
    VOLT_VSYS_PRST = device.read_unsigned_word(0x73)
    VOLT_5V_PRST = device.read_unsigned_word(0x76)
    VOLT_5V = device.read_unsigned_word(0x77)
    VOLT_5V_USB = device.read_unsigned_word(0x78)
    VOLT_3V3 = device.read_unsigned_word(0x7A)

    print("VOLT_BATT_IN: " + str(VOLT_BATT_IN) + " mV")
    print("VOLT_DC_IN: " + str(VOLT_DC_IN) + " mV")
    print("VOLT_MPWR_IN: " + str(VOLT_MPWR_IN) + " mV")
    print("VOLT_VSYS_PRST: " + str(VOLT_VSYS_PRST) + " mV")
    print("VOLT_5V_PRST: " + str(VOLT_5V_PRST) + " mV")
    print("VOLT_5V: " + str(VOLT_5V) + " mV")
    print("VOLT_5V_USB: " + str(VOLT_5V_USB) + " mV")
    print("VOLT_3V3: " + str(VOLT_3V3) + " mV")

    print("")
    print("[Power Controls]")

    SHUTDOWN_CTRL = device.read_unsigned_byte(0xA0)
    BUTT_SHORT_HOLD_TURNON = device.read_unsigned_byte(0xA1)
    BUTT_SHORT_HOLD_TURNOFF = device.read_unsigned_byte(0xA2)
    BUTT_LONG_HOLD = device.read_unsigned_byte(0xA3)
    M1_TIMEOUT_MIN = device.read_unsigned_word(0xAA)
    M1_TIMEOUT_MAX = device.read_unsigned_word(0xAB)
    M2_TIMEOUT_MIN = device.read_unsigned_word(0xAC)
    M2_TIMEOUT_MAX = device.read_unsigned_word(0xAD)
    M3_TIMEOUT = device.read_unsigned_word(0xAE)
    USB_5V_TIMEOUT = device.read_unsigned_word(0xAF)

    print("SHUTDOWN_CTRL: " + str(int_to_binary(SHUTDOWN_CTRL)))
    print(
        "BUTT_SHORT_HOLD_TURNON: " +
        str(float(BUTT_SHORT_HOLD_TURNON / 10)) + " secs"
    )
    print(
        "BUTT_SHORT_HOLD_TURNOFF: " +
        str(float(BUTT_SHORT_HOLD_TURNOFF / 10)) + " secs"
    )
    print("BUTT_LONG_HOLD: " + str(float(BUTT_LONG_HOLD / 10)) + " secs")
    print("M1_TIMEOUT_MIN: " + str(M1_TIMEOUT_MIN) + " secs")
    print("M1_TIMEOUT_MAX: " + str(M1_TIMEOUT_MAX) + " secs")
    print("M2_TIMEOUT_MIN: " + str(M2_TIMEOUT_MIN) + " secs")
    print("M2_TIMEOUT_MAX: " + str(M2_TIMEOUT_MAX) + " secs")
    print("M3_TIMEOUT: " + str(M3_TIMEOUT) + " secs")
    print("USB_5V_TIMEOUT: " + str(int_to_hex(USB_5V_TIMEOUT)))

    print("")
    print("[Battery Controls and Status]")

    STORAGE_MODE = device.read_unsigned_byte(0xB0)
    TEMPERATURE = device.read_unsigned_word(0xB1)
    VOLTAGE = device.read_unsigned_word(0xB2)
    CURRENT = device.read_unsigned_word(0xB3)
    RSOC = device.read_unsigned_byte(0xB4)
    TIME_TO_EMPTY = device.read_unsigned_word(0xB5)
    TIME_TO_FULL = device.read_unsigned_word(0xB6)
    VOLT_CELL1 = device.read_unsigned_word(0xB7)
    VOLT_CELL2 = device.read_unsigned_word(0xB8)
    VOLT_CELL3 = device.read_unsigned_word(0xB9)
    VOLT_CELL4 = device.read_unsigned_word(0xBA)
    PF_ERROR = device.read_unsigned_byte(0xBB)
    SERIAL_NUM = device.read_unsigned_word(0xBC)
    MANUF_DATE = device.read_unsigned_word(0xBD)
    CHARGING_ERROR = device.read_unsigned_byte(0xBF)

    print("STORAGE_MODE: " + str(STORAGE_MODE))
    print("TEMPERATURE: " + str(float(TEMPERATURE / 10)) + " K")
    print("VOLTAGE: " + str(VOLTAGE) + " mV")
    print("CURRENT: " + str(CURRENT) + " mA")
    print("RSOC: " + str(RSOC) + " %")
    print("TIME_TO_EMPTY: " + str(TIME_TO_EMPTY) + " mins")
    print("TIME_TO_FULL: " + str(TIME_TO_FULL) + " mins")
    print("VOLT_CELL1: " + str(VOLT_CELL1) + " mV")
    print("VOLT_CELL2: " + str(VOLT_CELL2) + " mV")
    print("VOLT_CELL3: " + str(VOLT_CELL3) + " mV")
    print("VOLT_CELL4: " + str(VOLT_CELL4) + " mV")
    print("PF_ERROR: " + str(PF_ERROR))
    print("SERIAL_NUM: " + str(SERIAL_NUM))
    print("MANUF_DATE: " + str(int_to_date(MANUF_DATE)))
    print("CHARGING_ERROR: " + str(CHARGING_ERROR))

    print("")
    print("[Miscellaneous Features]")

    AUD_CONFIG = device.read_unsigned_byte(0xC0)
    REAL_TIME_COUNTER = device.read_n_unsigned_bytes(0xC1, number_of_bytes=4)

    print("AUD_CONFIG: " + str(int_to_binary(AUD_CONFIG)))
    print("REAL_TIME_COUNTER: " + str(int_to_date_unix(REAL_TIME_COUNTER)))

    print("")
    print("[DISPLAY]")

    TEST_MODE = device.read_unsigned_byte(0xD0)
    BACKLIGHT = device.read_unsigned_byte(0xD1)
    STATUS = device.read_unsigned_byte(0xD2)
    MUX_CONTROL = device.read_unsigned_byte(0xD3)

    print("TEST_MODE: " + str(TEST_MODE))
    print("BACKLIGHT: " + str(int_to_binary(BACKLIGHT)))
    print("STATUS: " + str(int_to_binary(STATUS)))
    print("MUX_CONTROL: " + str(int_to_binary(MUX_CONTROL)))

    print("")
    print("[Device Info]")

    MCU_SOFT_VERS_MAJOR = device.read_unsigned_byte(0xE0)
    MCU_SOFT_VERS_MINOR = device.read_unsigned_byte(0xE1)
    SCH_REV_MAJOR = device.read_unsigned_byte(0xE2)
    SCH_REV_MINOR = device.read_unsigned_byte(0xE3)
    BRD_REV = device.read_unsigned_byte(0xE4)
    PART_NAME = device.read_unsigned_word(0xE5)
    PART_NUMBER = device.read_unsigned_word(0xE6)
    SERIAL_ID = device.read_n_unsigned_bytes(0xE7, 4)
    DISPLAY_MCU_SOFT_VERS_MAJOR = device.read_unsigned_byte(0xE8)
    DISPLAY_MCU_SOFT_VERS_MINOR = device.read_unsigned_byte(0xE9)
    DISPLAY_SCH_REV_MAJOR = device.read_unsigned_byte(0xEA)
    DISPLAY_SCH_REV_MINOR = device.read_unsigned_byte(0xEB)
    DISPLAY_BRD_REV = device.read_unsigned_byte(0xEC)
    DISPLAY_PART_NAME = device.read_unsigned_word(0xED)
    DISPLAY_PART_NUMBER = device.read_unsigned_word(0xEE)
    DISPLAY_SERIAL_ID = device.read_n_unsigned_bytes(0xEF, number_of_bytes=4)

    print("MCU_SOFT_VERS_MAJOR: " + str(MCU_SOFT_VERS_MAJOR))
    print("MCU_SOFT_VERS_MINOR: " + str(MCU_SOFT_VERS_MINOR))
    print("SCH_REV_MAJOR: " + str(SCH_REV_MAJOR))
    print("SCH_REV_MINOR: " + str(SCH_REV_MINOR))
    print("BRD_REV: " + str(BRD_REV))
    print("PART_NAME: " + str(int_to_hex(PART_NAME)))
    print("PART_NUMBER: " + str(int_to_hex(PART_NUMBER)))
    print("SERIAL_ID: " + str(int_to_hex(SERIAL_ID)))
    print("DISPLAY_MCU_SOFT_VERS_MAJOR: " + str(DISPLAY_MCU_SOFT_VERS_MAJOR))
    print("DISPLAY_MCU_SOFT_VERS_MINOR: " + str(DISPLAY_MCU_SOFT_VERS_MINOR))
    print("DISPLAY_SCH_REV_MAJOR: " + str(DISPLAY_SCH_REV_MAJOR))
    print("DISPLAY_SCH_REV_MINOR: " + str(DISPLAY_SCH_REV_MINOR))
    print("DISPLAY_BRD_REV: " + str(DISPLAY_BRD_REV))
    print("DISPLAY_PART_NAME: " + str(int_to_hex(DISPLAY_PART_NAME)))
    print("DISPLAY_PART_NUMBER: " + str(int_to_hex(DISPLAY_PART_NUMBER)))
    print("DISPLAY_SERIAL_ID: " + str(int_to_hex(DISPLAY_SERIAL_ID)))

    device.disconnect()

except Exception as e:
    print("Error getting pi-topHUB hardware diagnostics")
    print(str(e))

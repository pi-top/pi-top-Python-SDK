#!/bin/bash -e

###########################################################
# pt-diagnostics                                          #
#                                                         #
#   Gathers diagnostics information about pi-top hardware #
#   and software for troubleshooting purposes.            #
###########################################################

# shellcheck source=helper/common
common_utils="/usr/lib/pt-diagnostics/common"
if [[ -f "${common_utils}" ]]; then
  source "${common_utils}"
else
  print_line_red "${common_utils} not found - exiting"
  exit 1
fi

display_help() {
  echo "Usage: $(basename "${0}") [-j|-h]" >&2
  echo
  echo "   -j, --journal-limit           Set the maximum number of lines to get from each journal entry"
  echo "   -h, --help                    Show this help message"
  echo
}

check_journal_limit_val() {
  local val="${1}"
  if is_int "${val}"; then
    journal_lines="$val"
  else
    print_error "Error: non-integer value provided for journal limit"
  fi
}

parse_args() {
  while :; do
    case "${1}" in
      -j* | --journal-limit*)
        # Remove possible prefixes
        val=${1#"--journal-limit="}
        val=${val#"-j="}
        val=${val#"-j"}
        if [[ $val != "" ]]; then
          check_journal_limit_val "${val}"
          shift 1
        elif [ $# -gt 1 ]; then
          check_journal_limit_val "${2}"
          shift 2
        else
          print_error "Error: no value provided for journal limit"
        fi
        ;;
      -h | --help)
        display_help # Call your function
        exit 0
        ;;
      --) # End of all options
        shift
        break
        ;;
      -*)
        print_error "Error: Unknown option: ${1}" >&2
        ;;
      *) # No more options
        break
        ;;
    esac
  done
}

check_your_privilege() {
  if [ "$EUID" -ne 0 ]; then
    print_line_red "This program requires admin priviledges. Please run 'sudo $(basename "${0}")'"
    exit
  fi
}

header() {
  if dpkg -s pt-diagnostics &>/dev/null; then
    version=$(dpkg -s pt-diagnostics | grep "Version:" | cut -d' ' -f2)
  else
    version="N/A"
  fi
  current_datetime_string=$(date '+%d/%m/%Y %H:%M:%S')

  print_line_blue "===================================="
  print_line_blue "pt-diagnostics"
  print_line_blue " - Version: $version"
  print_line_blue " - Started: $current_datetime_string"
  print_line_blue "===================================="
  new_line

  print_line_green "Gathering data..."
  new_line
}

title() {
  local title="${1}"
  print_line_green "${ctr}. ${title}"
}

subtitle() {
  local point="${1}"
  local subtitle="${2}"
  print_line_yellow "   â”” ${ctr}.${point} $subtitle"
}

setup() {
  #==========================================================================
  title "Setup"
  #==========================================================================
  #--------------------------------------------------------------------------
  subtitle "1" "Prepare a temporary directory for support artifacts"
  #--------------------------------------------------------------------------

  if [ -d "${working_dir}" ]; then
    rm -rf "${working_dir}"
  fi

  mkdir "${working_dir}"

  if [ -f "$output_file" ]; then
    rm "$output_file"
  fi

  increment_ctr
}

diagnostics_metadata() {
  #==========================================================================
  title "pt-diagnostics Information"
  #==========================================================================

  #--------------------------------------------------------------------------
  subtitle "1" "Get information about pt-diagnostics"
  #--------------------------------------------------------------------------

  if dpkg -s pt-diagnostics &>/dev/null; then
    version=$(dpkg -s pt-diagnostics | grep "Version:" | cut -d' ' -f2)
  else
    version="N/A"
  fi
  current_datetime_string=$(date '+%d/%m/%Y %H:%M:%S')

  echo "Version: ${version}" > "${working_dir}/pt-diagnostics.info"
  echo "Started: ${current_datetime_string}" >> "${working_dir}/pt-diagnostics.info"

  increment_ctr
}

get_journal_logs() {
  systemd_service="${1}"
  if [ "${journal_lines}" -gt 0 ]; then
    journalctl -u "${systemd_service}" --no-pager -n "${journal_lines}"
  else
    journalctl -u "${systemd_service}" --no-pager
  fi
}

upgrades() {
  #==========================================================================
  title "Upgrade logs"
  #==========================================================================

  working_dir_upgrades="${working_dir}/Upgrades"

  mkdir "${working_dir_upgrades}"

  #--------------------------------------------------------------------------
  subtitle "1" "Get the log of any recent upgrades"
  #--------------------------------------------------------------------------

  cp "/var/log/apt/term.log" "${working_dir_upgrades}"
  cp "/var/log/apt/history.log" "${working_dir_upgrades}"

  increment_ctr
}

os() {
  #==========================================================================
  title "OS"
  #==========================================================================

  working_dir_os="${working_dir}/OS"

  mkdir "${working_dir_os}"

  #--------------------------------------------------------------------------
  subtitle "1" "Get version information"
  #--------------------------------------------------------------------------

  uname -a > "${working_dir_os}/uname.log"

  #--------------------------------------------------------------------------
  subtitle "2" "Get boot config files"
  #--------------------------------------------------------------------------

  cp /boot/config.txt "${working_dir_os}/boot_config.txt"
  cp /boot/cmdline.txt "${working_dir_os}/boot_cmdline.txt"

  #--------------------------------------------------------------------------
  subtitle "3" "Get boot kernel messages"
  #--------------------------------------------------------------------------

  dmesg > "${working_dir_os}/dmesg.log"

  #--------------------------------------------------------------------------
  subtitle "4" "Get raspi-config settings"
  #--------------------------------------------------------------------------

  touch "${working_dir_os}/raspi-config.log"

  get_raspi_config_settings "get_can_expand" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_hostname" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_boot_cli" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_autologin" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_boot_wait" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_boot_splash" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_overscan" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_camera" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_ssh" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_vnc" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_spi" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_i2c" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_serial" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_serial_hw" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_onewire" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_rgpio" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_pi_type" "${working_dir_os}/raspi-config.log"
  get_raspi_config_settings "get_wifi_country" "${working_dir_os}/raspi-config.log"

  #--------------------------------------------------------------------------
  subtitle "5" "Running processes"
  #--------------------------------------------------------------------------

  ps aux --sort=-pcpu > "${working_dir_os}/psaux.log"

  #--------------------------------------------------------------------------
  subtitle "6" "Get pt-issue"
  #--------------------------------------------------------------------------

  cp /etc/pt-issue "${working_dir_os}"

  #--------------------------------------------------------------------------
  subtitle "7" "Get failed systemd services"
  #--------------------------------------------------------------------------

  systemctl --failed > "${working_dir_os}/systemctl_failed.log"

  #--------------------------------------------------------------------------
  subtitle "8" "Get systemd status"
  #--------------------------------------------------------------------------

  systemctl status > "${working_dir_os}/systemctl_status.log"

  increment_ctr
}

network() {
  #==========================================================================
  title "Network"
  #==========================================================================

  working_dir_net="${working_dir}/Network"

  mkdir "${working_dir_net}"

  #--------------------------------------------------------------------------
  subtitle "1" "Get network interface config"
  #--------------------------------------------------------------------------

  ifconfig > "${working_dir_net}/ifconfig.log"
  cp /etc/network/interfaces "${working_dir_net}/interfaces"

  increment_ctr
}

installed_software() {
  #==========================================================================
  title "Software"
  #==========================================================================

  working_dir_software="${working_dir}/Software"

  mkdir "${working_dir_software}"

  #----------------------------------------------------------------------
  subtitle "1" "Get apt sources"
  #----------------------------------------------------------------------

  cp /etc/apt/sources.list.d/* "${working_dir_software}"

  #----------------------------------------------------------------------
  subtitle "2" "Get installed software"
  #----------------------------------------------------------------------

  apt list --installed > "${working_dir_software}/installed_packages.log" 2>/dev/null

  increment_ctr
}

pt-config-files() {
  #======================================================================
  title "pi-topOS configuration files"
  #======================================================================

  working_dir_cfg="${working_dir}/ptOSConfig"

  mkdir "${working_dir_cfg}"

  #----------------------------------------------------------------------
  subtitle "1" "Get pi-topOS configuration files"
  #----------------------------------------------------------------------

  cp -rf "/etc/pi-top" "${working_dir_cfg}"

  increment_ctr
}

pt-coder() {
  if dpkg -s pt-coder &>/dev/null; then
    #======================================================================
    title "pi-topCODER files"
    #======================================================================

    working_dir_coder="${working_dir}/pi-topCODER"

    mkdir "${working_dir_coder}"

    #----------------------------------------------------------------------
    subtitle "1" "Get the pt-coder log files"
    #----------------------------------------------------------------------

    get_journal_logs pt-coder > "${working_dir_coder}"/pt-coder.log

    #----------------------------------------------------------------------
    subtitle "2" "Get the pt-coder config file"
    #----------------------------------------------------------------------

    coderCfg="/home/pi/.config/pi-top/pt-coder/config.json"

    if [[ -f "${coderCfg}" ]]; then
      cp "${coderCfg}" "${working_dir_coder}"
    fi

    increment_ctr
  fi
}

pt-device-manager() {
  if dpkg -s pt-device-manager &>/dev/null; then
    #======================================================================
    title "Device Manager"
    #======================================================================

    working_dir_device_manager="${working_dir}/DeviceManager"

    mkdir "${working_dir_device_manager}"

    #----------------------------------------------------------------------
    subtitle "1" "Get a log of I2C status"
    #----------------------------------------------------------------------

    i2cdetect -y 1 > "${working_dir_device_manager}/i2cdetect.log"

    #----------------------------------------------------------------------
    subtitle "2" "Get the device manager service log"
    #----------------------------------------------------------------------

    get_journal_logs pt-device-manager > "${working_dir_device_manager}/pt-device-manager.log"

    increment_ctr
  fi
}

pt_hardware_info() {
  pt_hardware_info="/usr/lib/pt-diagnostics/pt-hardware-info"
  if [[ -x "${pt_hardware_info}" ]]; then
    #======================================================================
    title "Hardware"
    #======================================================================

    working_dir_hardware="${working_dir}/Hardware"

    mkdir "${working_dir_hardware}"

    #----------------------------------------------------------------------
    subtitle "1" "Get device register values for pi-topHUB"
    #----------------------------------------------------------------------

    "${pt_hardware_info}" > "${working_dir_hardware}/mcu_registers.log" 2>/dev/null

    increment_ctr
  fi
}

pt-systemd-service-status() {
  pt_systemd_service_status="/usr/lib/pt-diagnostics/pt-systemd-service-status"
  if [[ -f "${pt_systemd_service_status}" ]]; then
    #======================================================================
    title "pi-top Systemd services"
    #======================================================================

    working_dir_systemd="${working_dir}/Systemd"

    mkdir "${working_dir_systemd}"

    #----------------------------------------------------------------------
    subtitle "1" "Get systemd service statuses"
    #----------------------------------------------------------------------

    "${pt_systemd_service_status}" > "${working_dir_systemd}/service_statuses.log" 2>/dev/null

    increment_ctr
  fi
}

pt_software_info() {
  pt-config-files
  pt-coder
  pt-device-manager
  pt-systemd-service-status
}

encrypt() {
  print_line_green "Encrypting data..."
  read -n 1 -s -r -p "You will now be asked to enter a passphrase. Write down or remember your passphrase! Press any key to continue."

  if [[ -f "$output_file_encrypted" ]]; then
    rm "$output_file_encrypted"
  fi
  gpg -c "$output_file"
  rm "$output_file"
  final_file="$output_file_encrypted"
}

no_encrypt() {
  print_line_red "Not encrypting data..."
  final_file="$output_file"
}

please_provide_print() {
  source="${1}"
  print_line "Please provide the above $source and associated file passphrase to the pi-top support team for assistance."
  print_line_blue "NOTE: For a detailed explanation of how we handle your personal data and what your rights regarding your data are,\nplease consult our privacy policy: https://pi-top.com/legal/privacy-policy"
}

upload() {
  print_line_green "Uploading data..."
  curl --upload-file "$final_file" https://transfer.sh/
  upload_result=$?
  new_line
  if [ $upload_result -eq 0 ]; then
    please_provide_print "url"
  else
    print_line_red "Automatic upload of support data failed."
    no_upload_print
  fi
}

no_upload_print() {
  print_line_green "Support data can be found here:"
  print_line "$final_file"
  new_line
  please_provide_print "file"
}

finalise() {
  #==========================================================================
  # Compress data
  #==========================================================================

  new_line
  print_line_green "Compressing data..."

  cd "$working_parent_dir"
  zip -rq "$output_file" "$root_dirname"
  cd
  rm -rf "${working_dir}"

  #==========================================================================
  # Encrypt, if desired
  #==========================================================================
  while true; do
    print_line_green "If you are intending to share this information with pi-top support, it is recommended that you protect your data with a password."
    new_line
    read -r -p "Do you wish to encrypt your data? [y/n]  " yn
    case $yn in
      [Yy]*)
        encrypt
        break
        ;;
      [Nn]*)
        no_encrypt
        break
        ;;
      *) print_line_red "Please answer [Y]es or [N]o." ;;
    esac
  done

  new_line

  #==========================================================================
  # Upload, if desired
  #==========================================================================
  while true; do
    print_line_yellow "If you are intending to share this information with pi-top support, an easy way of sharing them with us is by uploading to transfer.sh and sharing the URL link."
    print_line_yellow "Files uploaded to transfer.sh are stored temporarily, and removed from the server within a few days."
    new_line
    read -r -p "Do you wish to upload your logs to https://transfer.sh?  [y/n]  " yn
    new_line
    case $yn in
      [Yy]*)
        upload
        break
        ;;
      [Nn]*)
        no_upload_print
        exit
        ;;
      *) print_line_red "Please answer [Y]es or [N]o." ;;
    esac
  done

  new_line
  print_line_blue "Done. Exiting..."
}

parse_args "$@"
check_your_privilege
header
setup
diagnostics_metadata
upgrades
os
network
installed_software
pt_software_info
pt_hardware_info
finalise

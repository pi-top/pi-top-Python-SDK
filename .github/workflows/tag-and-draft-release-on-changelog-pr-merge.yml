name: Create Draft GitHub Release And Tag On Merging Changelog PR

on:
  pull_request:
    types: [closed]

jobs:
  check-should-run:
    runs-on: ubuntu-20.04
    outputs:
      should_run: ${{ steps.check_should_run.outputs.should_run }}
    steps:

      - name: Set 'should run' variable
        id: check_should_run
        env:
          CI_CHANGELOG_BUMP_BRANCH: ${{ secrets.CI_CHANGELOG_BUMP_BRANCH }}
          PR_MERGED: ${{ github.event.pull_request.merged }}
        run: |
          if [[ "${GITHUB_HEAD_REF}" == "${CI_CHANGELOG_BUMP_BRANCH}" ]] && [[ "${PR_MERGED}" == "true" ]]; then
            conditions_met="true"
          else
            conditions_met="false"
          fi
          echo "::set-output name=should_run::${conditions_met}"

  add-version-tag:
    needs: check-should-run
    if: needs.check-should-run.outputs.should_run == 'true'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Create and push Debian version tag
        run: |
          new_version="$(head -n1 debian/changelog | awk '{print $2}' | cut -d'-' -f1 | sed "s/(//g" | sed "s/)//g")"
          git tag --force "v${new_version}"
          git push --force --tags

  build-python:
    needs: add-version-tag
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build
        # Create source distribution (sdist) and wheel (bdist_wheel)
        # By default, both will be placed in dist/ under the current directory
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload Python distribution artifacts
        uses: actions/upload-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "${{ github.workspace }}/dist"

  build-debian:
    needs: add-version-tag
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Build Debian package
        run: |
          mkdir -p /tmp/artifacts/{src,bin}
          docker run --rm \
            --volume ${{ github.workspace }}:/src \
            --volume /tmp/artifacts/bin:/build \
            pitop/deb-build:latest

      - name: Separate Debian source package files from binary
        run: |
          mv /tmp/artifacts/bin/* /tmp/artifacts/src/
          mv /tmp/artifacts/src/*.deb /tmp/artifacts/bin/

      - name: Upload Debian source package files
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb-src"
          path: "/tmp/artifacts/src/"

      - name: Upload Debian binary packages
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
          path: "/tmp/artifacts/bin/"

  create-draft-release:
    runs-on: ubuntu-20.04
    needs: [ build-debian, build-python ]
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Get Debian Version
        id: get_deb_version
        run: |
          DEB_VER=$(head -n1 debian/changelog | awk '{print $2}' | cut -d'-' -f1 | sed "s/(//g" | sed "s/)//g")
          echo "::set-output name=deb_ver::$DEB_VER"

      - name: Download Python artifact
        uses: actions/download-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "./py"

      - name: Download Debian binary artifacts
        uses: actions/download-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
            path: "./deb/"

      - name: Download Debian source artifacts
        uses: actions/download-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb-src"
            path: "./deb-src/"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get_deb_version.outputs.deb_ver }}"
          name: "v${{ steps.get_deb_version.outputs.deb_ver }}"
          draft: true
          prerelease: false
          body: |
            ${{ secrets.GH_RELEASE_BODY_TEXT }}
          files: |
            ./py/*
            ./deb/*
            ./deb-src/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

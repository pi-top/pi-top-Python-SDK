name: Create Draft GitHub Release And Tag On Merging Changelog PR

on:
  pull_request:
    types: [closed]

jobs:
  add-version-tag:
    if: ${{ github.head_ref }} == ${{ secrets.CI_CHANGELOG_BUMP_BRANCH }} && ${{ github.event.pull_request.merged }} == true
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Create and push Debian version tag
        run: |
          new_version="$(head -n1 debian/changelog | awk '{print $2}' | cut -d'-' -f1 | sed "s/(//g" | sed "s/)//g")"
          git tag "v${new_version}"
          git push --tags

  build-python:
    needs: [ add-version-tag ]
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build
        # Create source distribution (sdist) and wheel (bdist_wheel)
        # By default, both will be placed in dist/ under the current directory
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload Python distribution artifacts
        uses: actions/upload-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "${{ github.workspace }}/dist"

  build-debian:
    needs: [ add-version-tag ]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target_arch: ["armhf", "arm64"]
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Build Debian package
        uses: pi-top/action-debian-package@v0.2.2
        with:
          source_directory: "${{ github.workspace }}"
          artifacts_directory: "${{ github.workspace }}/artifacts/bin"

          docker_image: "pitop/deb-build:latest"
          distribution: "buster-backports"
          target_architecture: ${{ matrix.target_arch }}

          lintian_opts: "--dont-check-part nmu --no-tag-display-limit --display-info --show-overrides --fail-on error --fail-on warning --fail-on info"
          # Package uses latest packaging syntax and Lintian opts/tags
          dpkg_buildpackage_opts: "--no-sign --no-check-builddeps --post-clean"

      - name: Separate Debian source package files from binary
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/src/
          mv ${{ github.workspace }}/artifacts/bin/* ${{ github.workspace }}/artifacts/src/
          mv ${{ github.workspace }}/artifacts/src/*.deb ${{ github.workspace }}/artifacts/bin/

      - name: Upload Debian source package files
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-${{ matrix.target_arch }}-deb-src"
          path: "${{ github.workspace }}/artifacts/src/"

      - name: Upload Debian binary packages
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-${{ matrix.target_arch }}-deb"
          path: "${{ github.workspace }}/artifacts/bin/"

  create-draft-release:
    runs-on: ubuntu-20.04
    needs: [ build-debian, build-python ]
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Get Debian Version
        id: get_deb_version
        run: |
          DEB_VER=$(head -n1 debian/changelog | awk '{print $2}' | cut -d'-' -f1 | sed "s/(//g" | sed "s/)//g")
          echo "::set-output name=deb_ver::$DEB_VER"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.get_deb_version.outputs.deb_ver }}"
          release_name: "v${{ steps.get_deb_version.outputs.deb_ver }}"
          draft: true
          prerelease: false
          body: |
            The SDK and its related CI workflows are still in active development and subject to breaking changes.
            However, this release is regarded as "fairly stable" and the SDK itself should work in most of the detailed use-cases.

      - name: Download Python artifact
        uses: actions/download-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "./py"

      - name: Get Python wheel filename
        id: get_py_whl_filename
        run: |
          cd ./py
          WHL_NAME=$(ls | grep "^pitop-.*.whl$")
          echo "::set-output name=filename::$WHL_NAME"

      # More info:
      # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      - name: Upload Python wheel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./py/${{ steps.get_py_whl_filename.outputs.filename }}
          asset_name: ${{ steps.get_py_whl_filename.outputs.filename }}
          asset_content_type: text/plain

      - name: Download Debian artifact (armhf)
        uses: actions/download-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-armhf-deb"
            path: "./armhf/"

      - name: Get main package filename (armhf)
        id: get_armhf_main_pkg_filename
        run: |
          cd ./armhf
          PKG_NAME=$(ls | grep "^python3-pitop_.*armhf.deb$")
          echo "::set-output name=filename::$PKG_NAME"

      - name: Upload main Debian package (armhf)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./armhf/${{ steps.get_armhf_main_pkg_filename.outputs.filename }}
          asset_name: ${{ steps.get_armhf_main_pkg_filename.outputs.filename }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Get docs package filename (armhf)
        id: get_armhf_docs_pkg_filename
        run: |
          cd ./armhf
          PKG_NAME=$(ls | grep "^python3-pitop-doc_.*all.deb$")
          echo "::set-output name=filename::$PKG_NAME"

      - name: Upload docs Debian package (armhf)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./armhf/${{ steps.get_armhf_docs_pkg_filename.outputs.filename }}
          asset_name: ${{ steps.get_armhf_docs_pkg_filename.outputs.filename }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Download Debian artifact (arm64)
        uses: actions/download-artifact@v2
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-arm64-deb"
            path: "./arm64/"

      - name: Get main package filename (arm64)
        id: get_arm64_main_pkg_filename
        run: |
          cd ./arm64
          PKG_NAME=$(ls | grep "^python3-pitop_.*arm64.deb$")
          echo "::set-output name=filename::$PKG_NAME"

      - name: Upload main Debian package (arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./arm64/${{ steps.get_arm64_main_pkg_filename.outputs.filename }}
          asset_name: ${{ steps.get_arm64_main_pkg_filename.outputs.filename }}
          asset_content_type: application/vnd.debian.binary-package

name: Deploy Published Release

on:
  push:
    branches: [ "ci-test-publish-release-*" ]
  release:
    types: [published]

jobs:
  add-stable-tag:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0

      - name: Tag release commit as 'stable' for ReadTheDocs
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "stable"
          commit_sha: ${{ env.GITHUB_SHA }}
          force_push_tag: true

  deploy-release:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          ref: ${{ env.GITHUB_SHA }}

      - name: Upload to PyPI
        uses: casperdcl/deploy-pypi@v2
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          build: true
          upload: github.event_name == 'release' && github.event.action == 'published'

      - name: Download latest release's assets
        run: |
          mkdir -p ${{ github.workspace }}/deb
          cd ${{ github.workspace }}/deb
          sudo apt-get install -y curl jq wget
          curl -s "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r ".assets | .[] | .browser_download_url" | xargs -n1 wget

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Deploy to PyPI
        if: github.event_name == 'release' && github.event.action == 'published'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload --verbose *.whl

      - name: Write secrets to file
        shell: bash
        env:
          APT_GCS_SERVICE_ACCT_KEY: ${{secrets.APT_GCS_SERVICE_ACCT_KEY}}
          APT_PUB_GPG_SIGNING_KEY: ${{secrets.APT_PUB_GPG_SIGNING_KEY}}
          APT_SEC_GPG_SIGNING_KEY: ${{secrets.APT_SEC_GPG_SIGNING_KEY}}
        # Private key must have perms reduced
        run: |
          mkdir -p ${{ github.workspace }}/{gcloud,config}
          echo "$APT_GCS_SERVICE_ACCT_KEY" > ${{ github.workspace }}/gcloud/service-account.json
          echo "$APT_PUB_GPG_SIGNING_KEY" > ${{ github.workspace }}/config/reprepro_pub.gpg
          echo "$APT_SEC_GPG_SIGNING_KEY" > ${{ github.workspace }}/config/reprepro_sec.gpg
          chmod 600 ${{ github.workspace }}/config/reprepro_sec.gpg

      - name: Create and start Docker image
        run: |
          docker create \
            --privileged \
            --name reprepro-gcs \
            --env GCS_BUCKET_NAME=${{ secrets.APT_GCS_BUCKET_NAME }} \
            --env DISTRO_NAME=pi-top-os \
            --volume ${{ github.workspace }}/gcloud:/gcloud \
            --volume ${{ github.workspace }}/config:/config \
            --volume ${{ github.workspace }}/deb:/incoming \
            --tty \
            pitop/reprepro-gcs:latest \
            sleep inf
          docker start reprepro-gcs

      - name: Mount GCS to filesystem
        run: |
          docker exec reprepro-gcs /mount-gcs.sh

      - name: Import GPG signing keys
        run: |
          docker exec reprepro-gcs /import-gpg-keys.sh

      - name: Deploy to APT repository
        # TODO: re-enable before merging!
        # if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          docker exec reprepro-gcs /include-changes-from-incoming.sh

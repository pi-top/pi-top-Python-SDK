name: Run Tests and Upload Coverage Report

on: push

jobs:
  test-and-upload-coverage-report:
   runs-on: ubuntu-20.04
   steps:
     - name: Checkout code
       uses: actions/checkout@v3

     - name: Install apt dependencies
       run: |
         sudo apt update
         DEBIAN_FRONTEND=noninteractive sudo apt install cmake python3-opencv -y

     - name: Setup Python
       uses: actions/setup-python@v4
       with:
         python-version: 3.9
         cache: 'pip'
         cache-dependency-path: 'tests/requirements.txt'

     - name: Get pip cache dir
       id: pip-cache
       run: |
         echo "dir=$(pip cache dir)" >>$GITHUB_OUTPUT

     - name: Cache python downloaded dependencies
       id: cache-python-downloaded-deps
       uses: actions/cache@v3
       env:
         cache-name: cache-python-downloaded-dependencies
       with:
         path: ${{ steps.pip-cache.outputs.dir }}
         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
         restore-keys: |
           ${{ runner.os }}-pip-
           ${{ runner.os }}-

     - name: Cache python built dependencies
       id: cache-python-built-deps
       uses: actions/cache@v3
       env:
         cache-name: cache-python-built-dependencies
       with:
         path: ${{ env.pythonLocation }}/lib/python3.9/site-packages/
         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
         restore-keys: |
           ${{ runner.os }}-pip-
           ${{ runner.os }}-

     - name: Cache shape predictors
       id: cache-sdk-shape-predictors
       uses: actions/cache@v3
       env:
         cache-name: cache-sdk-shape-predictors
       with:
         path: ~/.config/pi-top/sdk/models/
         key: ${{ runner.os }}-sdk-shape-predictors-${{ hashFiles('~/.config/pi-top/sdk/models/**') }}
         restore-keys: |
           ${{ runner.os }}-sdk-shape-predictors-

     - name: Install pip dependencies
       run: pip3 install -r tests/requirements.txt

     - name: Run Python tests and generate coverage report
       run: |
         # Use pygame without a display for simulation tests
         export SDL_VIDEODRIVER="dummy"
         python3 -m pytest --verbose --cov-report term-missing --cov=pitop --numprocesses auto --dist=loadfile --timeout=300
         python3 -m coverage xml

     - name: Upload Python test coverage reports to Codecov
       uses: codecov/codecov-action@v3.1.1
       with:
         files: ./coverage.xml
         flags: unittests
         env_vars: OS,PYTHON
         fail_ci_if_error: true
         verbose: true

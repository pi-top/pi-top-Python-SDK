name: Build, Test and Publish

on:
  release:
    types: [created]
  pull_request:
    branches: [ "master" ]
  push:
    branches: [ "master" ]

jobs:
  patch-src:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # TODO: move to Debian Docker container
      # - name: Install dependencies
      #   if: github.event_name != 'release'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y git-buildpackage
      # - name: Patch changelog
      #   if: github.event_name != 'release'
      #   # '--ignore-branch' for testing on feature branch
      #   run: |
      #     gbp dch --ignore-branch --auto --snapshot --distribution=stable --force-distribution

      - name: Show updated changelog
        if: github.event_name != 'release'
        run: |
          cat debian/changelog

      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Upload patched src as artifact
        uses: "actions/upload-artifact@v2"
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
          path: debian/changelog


  python-package:
    needs: patch-src
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download patched changelog
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
            path: "${{ github.workspace }}/${{ env.GITHUB_REPOSITORY_NAME }}/debian/changelog"

      - name: Show changelog
        run: |
          cat debian/changelog

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel readme-renderer

      # TODO: run proper Python tests
      - name: Test
        # Create source distribution (sdist) and wheel (bdist_wheel)
        # By default, both will be placed in dist/ under the current directory
        run: |
          python -m readme_renderer README.rst -o /tmp/README.html

      - name: Build
        # Create source distribution (sdist) and wheel (bdist_wheel)
        # By default, both will be placed in dist/ under the current directory
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload Python distribution artifacts
        uses: "actions/upload-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "${{ github.workspace }}/dist"

  debian-package:
    needs: patch-src
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download patched changelog
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
            path: "${{ github.workspace }}/${{ env.GITHUB_REPOSITORY_NAME }}/debian/changelog"

      - name: Build 32-bit and 64-bit Debian packages
        uses: pi-top/action-debian-package@master
        with:
          source_directory: "./"
          artifacts_directory: "./artifacts"

          distribution: "buster-backports"
          target_architectures: "armhf,arm64"

          lintian_opts: "--dont-check-part nmu --no-tag-display-limit --display-info --show-overrides --fail-on error --fail-on warning --fail-on info"
          # Package uses latest packaging syntax and Lintian opts/tags
          dpkg_buildpackage_opts: "--no-sign --no-check-builddeps --post-clean"

          # Used by pybuild for Python packages
          additional_target_arch_multiarch_packages: "libpython3.7-minimal"

      - name: Upload Debian package artifacts
        uses: "actions/upload-artifact@v2"
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
          path: "${{ github.workspace }}/artifacts"

  python-publish:
    needs: [ python-package, debian-package ]
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Download Python distribution artifacts
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "${{ github.workspace }}/dist"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      # TODO: Only publish to TestPyPI for pre-releases (develop branch?)
      # - name: Publish to TestPyPI
      #   if: github.event_name == 'pull_request' || github.event_name == 'push'
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     twine upload --verbose --repository testpypi dist/*

      - name: Publish to PyPI
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload --verbose dist/*

  debian-publish:
    needs: [ python-package, debian-package ]
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Download Debian distribution artifacts
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
            path: "${{ github.workspace }}/dist"

      # TODO: publish to APT server

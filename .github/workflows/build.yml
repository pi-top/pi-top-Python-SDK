name: Build

on:
  release:
    types: [created]
  pull_request:
    branches: [ "master" ]
  push:
    branches: [ "master", "workflow/*" ]

jobs:
  patch-src:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # TODO: move to minimal Debian Docker container
      # - name: Install dependencies
      #   if: github.event_name != 'release'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y git-buildpackage
      # - name: Patch changelog
      #   if: github.event_name != 'release'
      #   # '--ignore-branch' for testing on feature branch
      #   run: |
      #     gbp dch --ignore-branch --auto --snapshot --distribution=stable --force-distribution

      - name: Show updated changelog
        if: github.event_name != 'release'
        run: |
          cat debian/changelog

      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Upload patched src as artifact
        uses: "actions/upload-artifact@v2"
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
          path: debian/changelog


  python-package:
    needs: patch-src
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download patched changelog
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
            path: "${{ github.workspace }}/${{ env.GITHUB_REPOSITORY_NAME }}/debian/changelog"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Build
        # Create source distribution (sdist) and wheel (bdist_wheel)
        # By default, both will be placed in dist/ under the current directory
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload Python distribution artifacts
        uses: "actions/upload-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "${{ github.workspace }}/dist"

  debian-package:
    needs: patch-src
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target_arch: ["armhf", "arm64"]
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download patched changelog
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
            path: "${{ github.workspace }}/${{ env.GITHUB_REPOSITORY_NAME }}/debian/changelog"

      - name: Build Debian package
        uses: pi-top/action-debian-package@v0.2.0
        with:
          source_directory: "./"
          artifacts_directory: "./artifacts"

          docker_image: "pitop/deb-build:latest"
          distribution: "buster-backports"
          target_architecture: ${{ matrix.target_arch }}

          lintian_opts: "--dont-check-part nmu --no-tag-display-limit --display-info --show-overrides --fail-on error --fail-on warning --fail-on info"
          # Package uses latest packaging syntax and Lintian opts/tags
          dpkg_buildpackage_opts: "--no-sign --no-check-builddeps --post-clean"

      - name: Upload Debian package artifacts
        uses: "actions/upload-artifact@v2"
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
          path: "${{ github.workspace }}/artifacts"

  # python-publish:
  #   needs: [ python-package, debian-package ]
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: GitHub Environment Variables Action
  #       uses: FranzDiebold/github-env-vars-action@v1.2.1

  #     - name: Download Python distribution artifacts
  #       uses: "actions/download-artifact@v2"
  #       with:
  #           name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
  #           path: "${{ github.workspace }}/dist"

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.x"

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install twine

  #     # TODO: Only publish to TestPyPI for pre-releases (develop branch?)
  #     # - name: Publish to TestPyPI
  #     #   if: github.event_name == 'pull_request' || github.event_name == 'push'
  #     #   env:
  #     #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #     #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #     #   run: |
  #     #     twine upload --verbose --repository testpypi dist/*

  #     - name: Publish to PyPI
  #       if: github.event_name == 'release'
  #       env:
  #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         twine upload --verbose dist/*

  # debian-publish:
  #   needs: [ python-package, debian-package ]
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: GitHub Environment Variables Action
  #       uses: FranzDiebold/github-env-vars-action@v1.2.1

  #     - name: Download Debian distribution artifacts
  #       uses: "actions/download-artifact@v2"
  #       with:
  #           name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
  #           path: "${{ github.workspace }}/dist"

  #     # TODO: publish to APT server

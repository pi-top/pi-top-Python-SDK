name: Build

# on:
#   release:
#     types: [created]
on:
  push:
    tags:
      - 'v*'
    branches: [ "master", "build/*" ]

jobs:
  patch-src:
    if: github.event_name != 'push' || github.ref != 'refs/tags/v*.*.*'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Set up Debian Docker container for changelog patching
        # '--ignore-branch' for testing on feature branch
        run: |
          docker create --name chglog --volume ${{ github.workspace }}:${{ github.workspace }} --workdir ${{ github.workspace }}/ --tty pitop/gbp-dch-gen:latest sleep inf
          docker start chglog
          docker exec chglog git config --global user.name "GitHub Build Action"
          docker exec chglog git config --global user.email "deb-maintainers@pi-top.com"

      - name: Patch changelog (snapshot)
        # '--ignore-branch' for testing on feature branch
        run: |
          docker exec chglog gbp dch --verbose --auto --git-author --ignore-branch --snapshot

      # Release changelogs are currently handled manually
      #
      # - name: Patch changelog (release)
      # if: github.event_name == 'push' && github.ref == 'refs/tags/v*.*.*'
      #   run: |
      #     docker exec chglog gbp dch --verbose --auto --git-author --release --distribution=stable

      - name: Show updated changelog
        run: |
          cat debian/changelog

      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Upload patched src as artifact
        uses: "actions/upload-artifact@v2"
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
          path: debian/changelog

  debian:
    # Does not require patch-src to have actually run
    # But does need to wait for it if it has
    if: ${{ always() }}
    needs: [ patch-src ]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # target_arch: ["armhf", "arm64"]
        target_arch: ["amd64"]
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Delete unpatched changelog
        if: github.event_name != 'push' || github.ref != 'refs/tags/v*.*.*'
        run: |
          rm ${{ github.workspace }}/debian/changelog

      - name: Download patched changelog
        if: github.event_name != 'push' || github.ref != 'refs/tags/v*.*.*'
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
            path: "${{ github.workspace }}/debian"

      - name: Build Debian package
        uses: pi-top/action-debian-package@v0.2.2
        with:
          source_directory: "${{ github.workspace }}"
          artifacts_directory: "${{ github.workspace }}/artifacts/bin"

          docker_image: "pitop/deb-build:latest"
          distribution: "buster-backports"
          target_architecture: ${{ matrix.target_arch }}

          lintian_opts: "--dont-check-part nmu --no-tag-display-limit --display-info --show-overrides --fail-on error --fail-on warning --fail-on info"
          # Package uses latest packaging syntax and Lintian opts/tags
          dpkg_buildpackage_opts: "--no-sign --no-check-builddeps --post-clean"

      - name: Separate Debian source package files from binary
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/src/
          mv ${{ github.workspace }}/artifacts/bin/* ${{ github.workspace }}/artifacts/src/
          mv ${{ github.workspace }}/artifacts/src/*.deb ${{ github.workspace }}/artifacts/bin/

      - name: Upload Debian source package files
        uses: "actions/upload-artifact@v2"
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-${{ matrix.target_arch }}-deb-src"
          path: "${{ github.workspace }}/artifacts/src/"

      - name: Upload Debian binary packages
        uses: "actions/upload-artifact@v2"
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-${{ matrix.target_arch }}-deb"
          path: "${{ github.workspace }}/artifacts/bin/"

      # TODO: publish to APT server

  python:
    # Does not require patch-src to have actually run
    # But does need to wait for it if it has
    if: ${{ always() }}
    # Python building will not catch errors, but Debian building will
    # so we wait for that to complete before continuing, to prevent releasing to PyPI
    needs: [ debian ]
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Delete unpatched changelog
        if: github.event_name != 'push' || github.ref != 'refs/tags/v*.*.*'
        run: |
          rm ${{ github.workspace }}/debian/changelog

      - name: Download patched changelog
        if: github.event_name != 'push' || github.ref != 'refs/tags/v*.*.*'
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-changelog"
            path: "${{ github.workspace }}/debian"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build
        # Create source distribution (sdist) and wheel (bdist_wheel)
        # By default, both will be placed in dist/ under the current directory
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload Python distribution artifacts
        uses: "actions/upload-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "${{ github.workspace }}/dist"

      # - name: Publish to PyPI
      #   if: github.event_name == 'push' && github.ref == 'refs/tags/v*.*.*'
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     twine upload --verbose dist/*

  create-release:
    # if: github.event_name == 'push' || github.ref == 'refs/tags/v*.*.*'
    runs-on: ubuntu-20.04
    needs: [ debian, python ]
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Download Python artifact
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-py"
            path: "./"

      # TODO - swap for arm!
      - name: Download Debian artifact (amd64)
        uses: "actions/download-artifact@v2"
        with:
            name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-amd64-deb"
            path: "./"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GITHUB_REF_NAME }}
          release_name: ${{ env.GITHUB_REF_NAME }}
          draft: true
          prerelease: false

      - name: Get main package filename (amd64)
        id: get_amd64_main_pkg_filename
        run: |
          PKG_NAME=$(ls | grep "^python3-pitop_.*amd64.deb$")
          echo "::set-output name=filename::$PKG_NAME"

      - name: Get docs package filename (amd64)
        id: get_amd64_docs_pkg_filename
        run: |
          PKG_NAME=$(ls | grep "^python3-pitop-doc_.*all.deb$")
          echo "::set-output name=filename::$PKG_NAME"

        # This pulls from the CREATE RELEASE step above
        # referencing its ID to get its outputs object
        # which include a `upload_url`
        # More info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      - name: Upload main Debian package (amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.get_amd64_main_pkg_filename.outputs.filename }}
          asset_name: ${{ steps.get_amd64_main_pkg_filename.outputs.filename }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload docs Debian package (amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.get_amd64_docs_pkg_filename.outputs.filename }}
          asset_name: ${{ steps.get_amd64_docs_pkg_filename.outputs.filename }}
          asset_content_type: application/vnd.debian.binary-package

name: Test and Build Packages on All Commits
# TODO: provide latest commit to 'master' as pre-release GitHub Release

# Don't run on branches intended for CI modifications
on:
  push:
    branches-ignore:
      - "ci-test-*"

jobs:
  test-python-linting:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Lint code
        uses: ricardochaves/python-lint@v1.3.0
        with:
          python-root-list: "pitop pitopcli"
          use-flake8: true
          extra-flake8-options: "--max-line-length=150"

          use-pylint: false
          # extra-pylint-options: ""

          use-pycodestyle: false
          # extra-pycodestyle-options: ""

          use-black: false
          # extra-black-options: ""

          use-mypy: false
          # extra-mypy-options: ""

          use-isort: false
          # extra-isort-options: ""

  test-python-pytest:
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7" # as on pi, because PyV4L2Camera errors on 3.9

      - name: Install pip
        run: |
          python -m pip install --upgrade pip

      # Installing pitopcommon from source as it is not yet published to PyPi
      - name: Checkout pitopcommon
        uses: actions/checkout@v2
        with:
          repository: pi-top/pi-top-Python-Common-Library
          path: pi-top-Python-Common-Library

      - name: Install pitopcommon
        run: |
          pip install ./pi-top-Python-Common-Library

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
          path: main

      - name: Install dependencies
        run: |
          sudo apt-get install libv4l-dev # for building PyV4L2Camera
          pip install "./main[test]"

      - name: Run pytest
        run: |
          python -m pytest main

  test-readme-render:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install readme-renderer

      - name: Test README
        run: |
          python -m readme_renderer README.rst -o /tmp/README.html

  build-debian-packages:
    needs: [ test-python-linting, test-python-pytest, test-readme-render ]
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Set up Debian Docker container for changelog patching
        run: |
          docker create --name chglog --volume ${{ github.workspace }}:${{ github.workspace }} --workdir ${{ github.workspace }}/ --tty pitop/gbp-dch-gen:latest sleep inf
          docker start chglog
          docker exec chglog git config --global user.name "pi-top"
          docker exec chglog git config --global user.email "deb-maintainers@pi-top.com"

      - name: Patch changelog (snapshot)
        run: |
          tag=$(git tag -l v* | sort -V | tail -n1)
          commit=$(git show-ref -s ${tag})
          commit_diff=$(git rev-list --count ${commit}..HEAD)

          docker exec chglog gbp dch --verbose --git-author --ignore-branch --snapshot \
            --since=${commit} --snapshot-number=${commit_diff}

      - name: Show updated changelog
        run: |
          cat debian/changelog

      - name: Build Debian package
        uses: pi-top/action-debian-package@v0.2.2
        with:
          source_directory: "${{ github.workspace }}"
          artifacts_directory: "${{ github.workspace }}/artifacts/bin"

          docker_image: "pitop/deb-build:latest"
          distribution: "buster-backports"

          lintian_opts: "--dont-check-part nmu --no-tag-display-limit --display-info --show-overrides --fail-on error --fail-on warning --fail-on info"
          # Package uses latest packaging syntax and Lintian opts/tags
          dpkg_buildpackage_opts: "--no-sign --no-check-builddeps --post-clean"

      - name: Separate Debian source package files from binary
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/src/
          mv ${{ github.workspace }}/artifacts/bin/* ${{ github.workspace }}/artifacts/src/
          mv ${{ github.workspace }}/artifacts/src/*.deb ${{ github.workspace }}/artifacts/bin/

      - name: Upload Debian source package files
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb-src"
          path: "${{ github.workspace }}/artifacts/src/"

      - name: Upload Debian binary packages
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
          path: "${{ github.workspace }}/artifacts/bin/"

name: Test and Build Packages on All Commits
# TODO: provide latest commit to 'master' as pre-release GitHub Release

# Don't run on branches intended for CI modifications
on:
  push:
    branches-ignore:
      - "ci-test-*"

jobs:
  test-pre-commit:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Run all pre-commit checks against all files
        uses: pre-commit/action@v2.0.0

  test-python-linting:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Lint code
        uses: ricardochaves/python-lint@v1.3.0
        with:
          python-root-list: "pitop pitopcli"
          use-flake8: true
          extra-flake8-options: "--max-line-length=150"

          use-pylint: false
          # extra-pylint-options: ""

          use-pycodestyle: false
          # extra-pycodestyle-options: ""

          use-black: false
          # extra-black-options: ""

          use-mypy: false
          # extra-mypy-options: ""

          use-isort: false
          # extra-isort-options: ""

  test-python-pytest:
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7" # as on pi, because PyV4L2Camera errors on 3.9

      - name: Install pip
        run: |
          python -m pip install --upgrade pip

      # Install pitopcommon from source in case latest version is required
      # and is not yet published to PyPi
      - name: Checkout pitopcommon
        uses: actions/checkout@v2
        with:
          repository: pi-top/pi-top-Python-Common-Library
          path: pi-top-Python-Common-Library

      - name: Install pitopcommon
        run: |
          pip install ./pi-top-Python-Common-Library

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
          path: main

      - name: Install dependencies
        run: |
          sudo apt-get install libv4l-dev # for building PyV4L2Camera
          pip install "./main[test]"

      - name: Run pytest
        run: |
          python -m pytest main

  test-readme-render:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install readme-renderer

      - name: Test README can be rendered
        run: |
          python -m readme_renderer README.rst -o /dev/null

  build-debian-packages:
    needs: [ test-pre-commit, test-python-linting, test-python-pytest, test-readme-render ]
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Patch changelog (snapshot)
        run: |
          docker run --rm \
            --volume ${{ github.workspace }}:/src \
            -e RELEASE=0 \
            pitop/gbp-dch-gen:latest

      - name: Add 'debian-changelog-line-too-long' Lintian override for patched changelog
        run: |
          grep "^Package: " debian/control | awk '{print $2}' | xargs -n1 -I % sh -c "echo '%: debian-changelog-line-too-long' >> debian/%.lintian-overrides"

      - name: Build Debian package
        run: |
          mkdir -p /tmp/artifacts/{src,bin}
          docker run --rm \
            --volume ${{ github.workspace }}:/src \
            --volume /tmp/artifacts/bin:/build \
            pitop/deb-build:latest

      - name: Separate Debian source package files from binary
        run: |
          mv /tmp/artifacts/bin/* /tmp/artifacts/src/
          mv /tmp/artifacts/src/*.deb /tmp/artifacts/bin/

      - name: Upload Debian source package files
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb-src"
          path: "/tmp/artifacts/src/"

      - name: Upload Debian binary packages
        uses: actions/upload-artifact@v2
        with:
          name: "${{ env.GITHUB_REPOSITORY_NAME }}-#${{ env.GITHUB_SHA_SHORT }}-deb"
          path: "/tmp/artifacts/bin/"
